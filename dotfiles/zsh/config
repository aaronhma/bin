autoload -U colors
colors

# PROMPT='
# %~ %{$fg_bold[black]%}$(vcprompt)
# → %{$reset_color%}'

# Allow for functions in the prompt.
setopt PROMPT_SUBST

autoload -U add-zsh-hook

add-zsh-hook chpwd chpwd_update_git_vars
add-zsh-hook preexec preexec_update_git_vars
add-zsh-hook precmd precmd_update_git_vars


# ------------------------------------------------------------------------------
#   DESCRIPTION: https://github.com/olivierverdier/zsh-git-prompt
#          AUTHOR:  Oliveier Verdier    Updated: 2015/06
# ------------------------------------------------------------------------------

## Function definitions
function preexec_update_git_vars() {
	case "$2" in
	    git*|hub*|gh*|stg*)
	    __EXECUTED_GIT_COMMAND=1
	    ;;
	esac
}

function precmd_update_git_vars() {
	if [ -n "$__EXECUTED_GIT_COMMAND" ] || [ -n "$ZSH_THEME_GIT_PROMPT_NOCACHE" ]; then
		update_current_git_vars
		unset __EXECUTED_GIT_COMMAND
	fi
}

function chpwd_update_git_vars() {
	update_current_git_vars
}

function update_current_git_vars() {
	unset __CURRENT_GIT_STATUS

	local gitstatus="$HOME/bin/dotfiles/plugins/git/gitstatus.py"
	_GIT_STATUS=`python3 ${gitstatus}`
	__CURRENT_GIT_STATUS=("${(@f)_GIT_STATUS}")
	GIT_BRANCH=$__CURRENT_GIT_STATUS[1]
	GIT_REMOTE=$__CURRENT_GIT_STATUS[2]
	GIT_STAGED=$__CURRENT_GIT_STATUS[3]
	GIT_CONFLICTS=$__CURRENT_GIT_STATUS[4]
	GIT_CHANGED=$__CURRENT_GIT_STATUS[5]
	GIT_UNTRACKED=$__CURRENT_GIT_STATUS[6]
	GIT_CLEAN=$__CURRENT_GIT_STATUS[7]
	GIT_AHEAD=$__CURRENT_GIT_STATUS[8]
	GIT_BEHIND=$__CURRENT_GIT_STATUS[9]
}

git_super_status() {
	precmd_update_git_vars
	if [ -n "$__CURRENT_GIT_STATUS" ]; then
	  STATUS="($GIT_BRANCH"
	  STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_BRANCH$GIT_BRANCH%{${reset_color}%}"
	  if [ -n "$GIT_REMOTE" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_REMOTE$GIT_REMOTE%{${reset_color}%}"
	  fi
	if [ "$GIT_BEHIND" -ne "0" ]; then
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_BEHIND$GIT_BEHIND%{${reset_color}%}"
	fi
	if [ "$GIT_AHEAD" -ne "0" ]; then
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD%{${reset_color}%}"
	fi
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
	  if [ "$GIT_STAGED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_STAGED$GIT_STAGED%{${reset_color}%}"
	  fi
	  if [ "$GIT_CONFLICTS" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CONFLICTS$GIT_CONFLICTS%{${reset_color}%}"
	  fi
	  if [ "$GIT_CHANGED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CHANGED$GIT_CHANGED%{${reset_color}%}"
	  fi
	  if [ "$GIT_UNTRACKED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED%{${reset_color}%}"
	  fi
	  if [ "$GIT_CLEAN" -eq "1" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CLEAN"
	  fi
	  STATUS="$STATUS%{${reset_color}%}$ZSH_THEME_GIT_PROMPT_SUFFIX"
	  echo "$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
	fi
}

# Output the current HEAD commit ID
function current_commit_id(){
	git rev-parse --short HEAD 2>/dev/null
}

# Save a smiley to a local variable if the last command exited with success.
local smiley="%(?,%{$fg[green]%}☺%{$reset_color%},%{$fg[red]%}☹%{$reset_color%})"

# ------------------------------------------------------------------------------
#          FILE:  kphoen.zsh-theme
#   DESCRIPTION:  oh-my-zsh theme file.
#        AUTHOR:  Kévin Gomez (geek63@gmail.com)
#       VERSION:  1.0.0
# ------------------------------------------------------------------------------

# Set the variable in TMUX theme
PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD")'

if [[ "$TERM" != "dumb" ]] && [[ "$DISABLE_LS_COLORS" != "true" ]]; then
	# PROMPT='%B%m%~%b$(git_super_status) %#
	# By default: <branch><branch tracking>|<local status>
	# ✔		:repository clean
	# ●n	:there are n staged files
	# ✖n	:there are n unmerged files
	# ✚n	:there are n changed but unstaged files
	# …	: there are some untracked files
	# n 	:ahead of remote by n commits
	#↓n 	:behind remote by n commits
	#↓m↑n :branches diverged, other by m commits, yours by n commits
	#:         :When the branch name starts with a colon, it means it's actually a hash, not a branch

	PROMPT='[%{$fg[yellow]%}%n: %{$fg[cyan]%}%~%{$reset_color%}$(git_super_status)%{$reset_color%}%{$(current_commit_id)%}]
%{$fg[red]%} ➜ '

	# Default values for the appearance of the prompt. Configure at will.
	ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[green]%}"
	ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
	ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
	ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg[green]%}"
	ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[yellow]%}●"
	ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}✖"
	ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[cyan]%}✚"
	ZSH_THEME_GIT_PROMPT_REMOTE=""
	ZSH_THEME_GIT_PROMPT_UNTRACKED="…"
	ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}✔"
	ZSH_THEME_GIT_PROMPT_DIRTY=""
	ZSH_THEME_GIT_PROMPT_BEHIND="%{↓%G%}"
	ZSH_THEME_GIT_PROMPT_AHEAD="%{↑%G%}"

	# display exitcode on the right when >0
	return_code="%(?..%{$fg[red]%}%? ↵%{$reset_color%})"

	RPROMPT='${return_code}$(git_prompt_status)%{$reset_color%}'

	ZSH_THEME_GIT_PROMPT_ADDED="%{$fg[green]%} ✚"
	ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg[blue]%} ✹"
	ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[red]%} ✖"
	ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg[magenta]%} ➜"
	ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[yellow]%} ═"
	ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[cyan]%} ✭"

else
	PROMPT='[%n@%m:%~$(git_prompt_info)]
%# '

	ZSH_THEME_GIT_PROMPT_PREFIX=" on"
	ZSH_THEME_GIT_PROMPT_SUFFIX=""
	ZSH_THEME_GIT_PROMPT_DIRTY=""
	ZSH_THEME_GIT_PROMPT_CLEAN=""

	# display exitcode on the right when >0
	return_code="%(?..%? ↵)"

	RPROMPT='${return_code}$(git_prompt_status)'

	ZSH_THEME_GIT_PROMPT_ADDED=" ✚"
	ZSH_THEME_GIT_PROMPT_MODIFIED=" ✹"
	ZSH_THEME_GIT_PROMPT_DELETED=" ✖"
	ZSH_THEME_GIT_PROMPT_RENAMED=" ➜"
	ZSH_THEME_GIT_PROMPT_UNMERGED=" ═"
	ZSH_THEME_GIT_PROMPT_UNTRACKED=" ✭"
fi




# Set RPROMPT to have info show up on the right, too.

#############################
# Other Options

# setopt PRINT_EXIT_VALUE

# setopt CORRECT
# setopt CORRECTALL

# setopt hist_ignore_dups     # ignore duplication command history list
# setopt share_history        # share command history data
# setopt HIST_IGNORE_SPACE
# setopt APPEND_HISTORY # write history only when closing
# setopt EXTENDED_HISTORY # add more info

# Other tabbing options
# setopt NO_AUTO_MENU
# setopt BASH_AUTO_LIST

#############################
# Variables

# Quote pasted URLs
# autoload url-quote-magic
# zle -N self-insert url-quote-magic

# HISTFILE=~/.zsh_history
# SAVEHIST=10000
# HISTSIZE=10000

# REPORTTIME=10 # Show elapsed time if command took more than X seconds
# LISTMAX=0 # ask to complete if top of list would scroll off screen

# Load completions for Ruby, Git, etc.
# autoload compinit
# compinit

# Make CTRL-W delete after other chars, not just spaces
# WORDCHARS=${WORDCHARS//[&=\/;\!#%\{]}

# bindkey -e

# Rebinding the Action Key
# Now every subsequent command will be prefixed with Ctrl-a instead of Ctrl-b.
