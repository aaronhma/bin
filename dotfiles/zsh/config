# Colors from http://wiki.archlinux.org/index.php/Color_Bash_Prompt
# misc

# \d: Date
# \h: Host
# \n: Newline
# \t: Time
# \u: Username
# \W: Current working directory
# \w: Full path to current directory


NO_COLOR='\e[0m' # disable any colors

# background colors
BBLACK='\e[40m'
BRED='\e[41m'
BGREEN='\e[42m'
BYELLOW='\e[43m'
BBLUE='\e[44m'
BMAGENTA='\e[45m'
BCYAN='\e[46m'
BWHITE='\e[47m'

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White

bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White

unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White

txtrst='\e[0m'    # Text Reset

# Update the command prompt to be <user>:<current_directory>(git_branch) >
# Note that the git branch is given a special color
# PS1="\n\u:\w \[$EBLACK\]\$(vcprompt)\[$NO_COLOR\] \n→ "

print_before_the_prompt () {
   #echo "$USER: $PWD"
   printf "\n $bldcyn%s: $bldred%s \n$txtrst" "$USER" "$PWD"
}

PROMPT_COMMAND=print_before_the_prompt
PS1="->"
##########################################################################################
autoload -U colors
colors

# PROMPT='
# %~ %{$fg_bold[black]%}$(vcprompt)
# → %{$reset_color%}'

# Allow for functions in the prompt.
setopt PROMPT_SUBST

autoload -U add-zsh-hook

add-zsh-hook preexec preexec_update_git_vars
add-zsh-hook precmd precmd_update_git_vars


# ------------------------------------------------------------------------------
#   DESCRIPTION: https://github.com/olivierverdier/zsh-git-prompt
#          AUTHOR:  Oliveier Verdier    Updated: 2015/06
# ------------------------------------------------------------------------------

## Function definitions
function preexec_update_git_vars() {
	case "$2" in
	    git*|hub*|gh*|stg*)
	    __EXECUTED_GIT_COMMAND=1
	    ;;
	esac
}

function precmd_update_git_vars() {
	if [ -n "$__EXECUTED_GIT_COMMAND" ] || [ -n "$ZSH_THEME_GIT_PROMPT_NOCACHE" ]; then
		unset __EXECUTED_GIT_COMMAND
	fi
}

git_super_status() {
	precmd_update_git_vars
	if [ -n "$__CURRENT_GIT_STATUS" ]; then
	  STATUS="($GIT_BRANCH"
	  STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_BRANCH$GIT_BRANCH%{${reset_color}%}"
	  if [ -n "$GIT_REMOTE" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_REMOTE$GIT_REMOTE%{${reset_color}%}"
	  fi
	if [ "$GIT_BEHIND" -ne "0" ]; then
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_BEHIND$GIT_BEHIND%{${reset_color}%}"
	fi
	if [ "$GIT_AHEAD" -ne "0" ]; then
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD%{${reset_color}%}"
	fi
	  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
	  if [ "$GIT_STAGED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_STAGED$GIT_STAGED%{${reset_color}%}"
	  fi
	  if [ "$GIT_CONFLICTS" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CONFLICTS$GIT_CONFLICTS%{${reset_color}%}"
	  fi
	  if [ "$GIT_CHANGED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CHANGED$GIT_CHANGED%{${reset_color}%}"
	  fi
	  if [ "$GIT_UNTRACKED" -ne "0" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED%{${reset_color}%}"
	  fi
	  if [ "$GIT_CLEAN" -eq "1" ]; then
		  STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CLEAN"
	  fi
	  STATUS="$STATUS%{${reset_color}%}$ZSH_THEME_GIT_PROMPT_SUFFIX"
	  echo "$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
	fi
}

# Output the current HEAD commit ID
function current_commit_id(){
	git rev-parse --short HEAD 2>/dev/null
}

# Save a smiley to a local variable if the last command exited with success.
local smiley="%(?,%{$fg[green]%}☺%{$reset_color%},%{$fg[red]%}☹%{$reset_color%})"

# ------------------------------------------------------------------------------
#          FILE:  kphoen.zsh-theme
#   DESCRIPTION:  oh-my-zsh theme file.
#        AUTHOR:  Kévin Gomez (geek63@gmail.com)
#       VERSION:  1.0.0
# ------------------------------------------------------------------------------

# Set the variable in TMUX theme
PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD")'

if [[ "$TERM" != "dumb" ]] && [[ "$DISABLE_LS_COLORS" != "true" ]]; then
	# PROMPT='%B%m%~%b$(git_super_status) %#
	# By default: <branch><branch tracking>|<local status>
	# ✔		:repository clean
	# ●n	:there are n staged files
	# ✖n	:there are n unmerged files
	# ✚n	:there are n changed but unstaged files
	# …	: there are some untracked files
	# n 	:ahead of remote by n commits
	#↓n 	:behind remote by n commits
	#↓m↑n :branches diverged, other by m commits, yours by n commits
	#:         :When the branch name starts with a colon, it means it's actually a hash, not a branch

	PROMPT='[%{$fg[yellow]%}%n: %{$fg[cyan]%}%~%{$reset_color%}$(git_super_status)%{$reset_color%}%{$(current_commit_id)%}]
%{$fg[red]%} ➜ '

	# Default values for the appearance of the prompt. Configure at will.
	ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[green]%}"
	ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
	ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
	ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg[green]%}"
	ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[yellow]%}●"
	ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}✖"
	ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[cyan]%}✚"
	ZSH_THEME_GIT_PROMPT_REMOTE=""
	ZSH_THEME_GIT_PROMPT_UNTRACKED="…"
	ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}✔"
	ZSH_THEME_GIT_PROMPT_DIRTY=""
	ZSH_THEME_GIT_PROMPT_BEHIND="%{↓%G%}"
	ZSH_THEME_GIT_PROMPT_AHEAD="%{↑%G%}"

	# display exitcode on the right when >0
	return_code="%(?..%{$fg[red]%}%? ↵%{$reset_color%})"

	RPROMPT='${return_code}$(git_prompt_status)%{$reset_color%}'

	ZSH_THEME_GIT_PROMPT_ADDED="%{$fg[green]%} ✚"
	ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg[blue]%} ✹"
	ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[red]%} ✖"
	ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg[magenta]%} ➜"
	ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[yellow]%} ═"
	ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[cyan]%} ✭"

else
	PROMPT='[%n@%m:%~$(git_prompt_info)]
%# '

	ZSH_THEME_GIT_PROMPT_PREFIX=" on"
	ZSH_THEME_GIT_PROMPT_SUFFIX=""
	ZSH_THEME_GIT_PROMPT_DIRTY=""
	ZSH_THEME_GIT_PROMPT_CLEAN=""

	# display exitcode on the right when >0
	return_code="%(?..%? ↵)"

	RPROMPT='${return_code}$(git_prompt_status)'

	ZSH_THEME_GIT_PROMPT_ADDED=" ✚"
	ZSH_THEME_GIT_PROMPT_MODIFIED=" ✹"
	ZSH_THEME_GIT_PROMPT_DELETED=" ✖"
	ZSH_THEME_GIT_PROMPT_RENAMED=" ➜"
	ZSH_THEME_GIT_PROMPT_UNMERGED=" ═"
	ZSH_THEME_GIT_PROMPT_UNTRACKED=" ✭"
fi
